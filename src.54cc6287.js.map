{"version":3,"sources":["storage.js","index.js"],"names":["fetch","then","r","console","log","catch","e"],"mappings":";;;AAuHAA,MAAM,wCACHC,KAAKC,GAAKC,QAAQC,IAAIF,IAEtBG,MAAMC,GAAKH,QAAQC,IAAIE;;;;ACxH1B,aAFA,QAAA,oBACA,QAAA,aACA,QAAA","file":"src.54cc6287.js","sourceRoot":"../src","sourcesContent":["// const save = (key, value) => {\n//   try {\n//     const serializedState = JSON.stringify(value);\n//     localStorage.setItem(key, serializedState);\n//     // console.log(serializedState);\n//   } catch (error) {\n//     console.error(\"Set state error: \", error.message);\n//   }\n// };\n\n// const load = (key) => {\n//   try {\n//     const serializedState = localStorage.getItem(key);\n//     return serializedState === null ? undefined : JSON.parse(serializedState);\n//   } catch (error) {\n//     console.error(\"Get state error: \", error.message);\n//   }\n// };\n\n// const remove = (key) => {\n//   try {\n//     localStorage.remove(key);\n//   } catch (error) {\n//     console.error(\"Get state error: \", error.message);\n//   }\n// };\n\n// const obj1 = {\n//   color: \"#ff00ff\",\n//   fontSize: \"14px\",\n// };\n// const obj2 = {\n//   color: \"#ff004f\",\n//   fontSize: \"12px\",\n// };\n\n// save(\"obj1\", obj1);\n// save(\"obj2\", obj2);\n// const savedObj1 = load(\"obj1\");\n// localStorage.removeItem(\"obj1\");\n\n// console.log(JSON.parse(localStorage.getItem(\"obj2\")), savedObj1, obj1);\n\n// export default {\n//   save,\n//   load,\n//   remove,\n// };\n// console.log({ save, load, remove });\n\n// const promise = new Promise((resolve, reject) => {\n//   const canBeResolved = Math.random() >= 0.5;\n//   if (canBeResolved) {\n//     resolve(\"Ok!\");\n//   }\n//   reject(\"Oops!\");\n// });\n// promise.then(onSuccess, onError);\n// function onSuccess(x) {\n//   console.log(\"on success ->\", x);\n// }\n// function onError(y) {\n//   console.log(\"on error ->\", y);\n// }\n\n// const promise = new Promise((resolve, reject) => {\n//   const canBeFulfilled = Math.random() < 0.5;\n//   setTimeout(() => {\n//     canBeFulfilled ? resolve(\"Ok!\") : reject(\"Oops!\");\n//   }, 777);\n// });\n// console.log(promise);\n// promise\n//   .then((a) => {\n//     // throw new Error(\"Error in the 1\");\n//     console.log(a, \"Success 1 !\");\n//     return 2;\n//   })\n// .then((b) => {\n//   // throw new Error(\"Error in the 2\");\n//   console.log(b, \"success 2!\");\n//   return 3;\n// })\n// .then((b) => {\n//   // throw new Error(\"Error in the 3\");\n//   console.log(b, \"success 3!\");\n//   return 7;\n// })\n// .then((r) => {\n//   throw new Error(\"Error in the 4\");\n//   console.log(r, \"success 4!\");\n// })\n// .catch((error) => console.log(error))\n// .finally(() => console.log(\"At any case!\"));\n\n// const makeOrder = (dish) => {\n//   const DELAY = 777;\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() >= 0.5;\n//     setTimeout(() => {\n//       passed\n//         ? resolve(`There's your ${dish}!`)\n//         : reject(`There's no product for your ${dish}!`);\n//     }, DELAY);\n//   });\n// };\n// const onOrderConfirmed = (result) => {\n//   console.log(\"On success:\", result);\n// };\n// const onOrderDenied = (e) => {\n//   console.log(\"On error:\", e);\n// };\n// makeOrder(\"pie\").then(onOrderConfirmed).catch(onOrderDenied);\n\n// const makeOrder = (dish) => {\n//   return Promise.resolve(`There's your ${dish}!`);\n// };\n// makeOrder(\"pie\").then((res) => console.log(res));\n\nfetch('https://pokeapi.co/api/v2/pokemon/11')\n  .then(r => console.log(r))\n  // .then(p => console.log(p))\n  .catch(e => console.log(e));\n","import './sass/main.scss';\nimport './storage';\nimport './training';\n"]}