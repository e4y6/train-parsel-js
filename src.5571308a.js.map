{"version":3,"sources":["hippodrome.js","index.js"],"names":["horses","raceCounter","refs","startBtn","document","querySelector","winnerField","progressField","tableBody","onStart","promises","map","run","updateProgressField","updateWinnerField","determineWinner","waitForAll","horsesP","Promise","race","then","horse","time","updateResultTable","all","resolve","getRandomTime","setTimeout","message","textContent","min","max","Math","ceil","random","tr","insertAdjacentHTML","addEventListener"],"mappings":";;;;;AAAA,MAAMA,EAAS,CAAC,OAAQ,OAAQ,QAAS,SACzC,IAAIC,EAAc,EAClB,MAAMC,EAAO,CACXC,SAAUC,SAASC,cAAc,sBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,6BAKpC,SAASI,IACPR,GAAe,EACTS,MAAAA,EAAWV,EAAOW,IAAIC,GAE5BC,EAAoB,gDACpBC,EAAkB,IAClBC,EAAgBL,GAChBM,EAAWN,GAGb,SAASK,EAAgBE,GACvBC,QAAQC,KAAKF,GAASG,KAAK,EAAGC,MAAAA,EAAOC,KAAAA,MACnCR,KAAqBO,mBAAuBC,EAAO,SACnDC,EAAkB,CAAEtB,YAAAA,EAAaoB,MAAAA,EAAOC,KAAAA,MAG5C,SAASN,EAAWC,GAClBC,QAAQM,IAAIP,GAASG,KAAK,IAAMP,EAAoB,2CAEtD,SAASD,EAAIS,EAAOpB,GACX,OAAA,IAAIiB,QAAQO,IACXH,MAAAA,EAAOI,EAAc,KAAM,MACjCC,WAAW,KACTF,EAAQ,CAAEJ,MAAAA,EAAOC,KAAAA,EAAMrB,YAAAA,KACtBqB,KAGP,SAASR,EAAkBc,GACzB1B,EAAKI,YAAYuB,YAAcD,EAEjC,SAASf,EAAoBe,GAC3B1B,EAAKK,cAAcsB,YAAcD,EAGnC,SAASF,EAAcI,EAAKC,GACnBC,OAAAA,KAAKC,KAAKD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAErD,SAASP,GAAkB,MAAEF,EAAF,KAASC,EAAT,YAAerB,IAClCkC,MAAAA,aAAgBlC,aAAuBoB,aAAiBC,EAAO,iBACrEpB,EAAKM,UAAU4B,mBAAmB,YAAaD,GAzCjDjC,EAAKC,SAASkC,iBAAiB,QAAS5B;;ACNxC,aAHA,QAAA,oBACA,QAAA,aACA,QAAA,cACA,QAAA","file":"src.5571308a.js","sourceRoot":"../src","sourcesContent":["const horses = ['Alfa', 'Beta', 'Gamma', 'Omega'];\nlet raceCounter = 0;\nconst refs = {\n  startBtn: document.querySelector('.js-race-start-btn'),\n  winnerField: document.querySelector('.js-winner'),\n  progressField: document.querySelector('.js-progress'),\n  tableBody: document.querySelector('.js-result-table > tbody'),\n};\n\nrefs.startBtn.addEventListener('click', onStart);\n\nfunction onStart() {\n  raceCounter += 1;\n  const promises = horses.map(run);\n\n  updateProgressField('Race has been started! No placement of bets!');\n  updateWinnerField('');\n  determineWinner(promises);\n  waitForAll(promises);\n}\n\nfunction determineWinner(horsesP) {\n  Promise.race(horsesP).then(({ horse, time }) => {\n    updateWinnerField(`${horse} won with time ${time / 100} s`);\n    updateResultTable({ raceCounter, horse, time });\n  });\n}\nfunction waitForAll(horsesP) {\n  Promise.all(horsesP).then(() => updateProgressField('Race is over. Please, place your bets!'));\n}\nfunction run(horse, raceCounter) {\n  return new Promise(resolve => {\n    const time = getRandomTime(1500, 2500);\n    setTimeout(() => {\n      resolve({ horse, time, raceCounter });\n    }, time);\n  });\n}\nfunction updateWinnerField(message) {\n  refs.winnerField.textContent = message;\n}\nfunction updateProgressField(message) {\n  refs.progressField.textContent = message;\n}\n\nfunction getRandomTime(min, max) {\n  return Math.ceil(Math.random() * (max - min - 1) + min);\n}\nfunction updateResultTable({ horse, time, raceCounter }) {\n  const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time / 100}s</td></tr>`;\n  refs.tableBody.insertAdjacentHTML('beforeend', tr);\n}\n","import './sass/main.scss';\nimport './storage';\nimport './training';\nimport './hippodrome.js';\n"]}